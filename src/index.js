// Definindo os jogadores
const player1 = {
  NOME: "Mario", // Nome do jogador 1
  VELOCIDADE: 4, // Velocidade do Mario
  MANOBRABILIDADE: 3, // N√≠vel de habilidade de manobras do Mario
  PODER: 3, // N√≠vel de poder do Mario
  PONTOS: 0, // Pontua√ß√£o inicial do Mario
};

const player2 = {
  NOME: "Luigi", // Nome do jogador 2
  VELOCIDADE: 5, // Velocidade do Luigi
  MANOBRABILIDADE: 2, // N√≠vel de habilidade de manobras do Luigi
  PODER: 2, // N√≠vel de poder do Luigi
  PONTOS: 0, // Pontua√ß√£o inicial do Luigi
};

// Fun√ß√£o para rolar o dado
async function rollDice() {
  return Math.floor(Math.random() * 6) + 1; // Gera um n√∫mero aleat√≥rio entre 1 e 6
}

// Fun√ß√£o para obter um tipo de bloco aleat√≥rio
async function getRandomBlock() {
  // Gera um n√∫mero aleat√≥rio entre 0 e 1
  let random = Math.random();

  // Vari√°vel para armazenar o resultado
  let result;

  // Usa uma estrutura switch para determinar o tipo de bloco com base no valor aleat√≥rio
  switch (true) {
    // Se o valor aleat√≥rio for menor que 0.33, √© um bloco RETA
    case random < 0.33:
      result = "RETA";
      break;
    // Se o valor aleat√≥rio estiver entre 0.33 e 0.66, √© um bloco CURVA
    case random < 0.66:
      result = "CURVA";
      break;
    // Caso contr√°rio, √© um bloco CONFRONTO
    default:
      result = "CONFRONTO";
      break;
  }

  // Retorna o tipo de bloco aleatoriamente determinado
  return result;
}

async function logRollResult(characterName, block, diceResult, attribute) {
  console.log(
    `${characterName} üé≤ rolou um dado de ${block} ${diceResult} + ${attribute} = ${
      diceResult + attribute
    }`
  );
}

async function playRaceEngine(character1, character2) {
  for (let round = 1; round <= 5; round++) {
    console.log(`üèÅRodada ${round}`);

    // sortear bloco
    let block = await getRandomBlock();
    console.log(`Bloco: ${block}`);

    // rolar os dados
    let diceResult1 = await rollDice();
    let diceResult2 = await rollDice();

    // teste de habilidade
    let totalTestSkill1 = 0;
    let totalTestSkill2 = 0;

    if (block === "META") {
      // habilidade de meta: rolar dois dados e somar os resultados
      totalTestSkill1 = diceResult1 + character1.VELOCIDADE;
      totalTestSkill2 = diceResult2 + character2.VELOCIDADE;

      await logRollResult(
        character1.NOME,
        "velocidade",
        diceResult1,
        character1.VELOCIDADE
      );

      await logRollResult(
        character2.NOME,
        "velocidade",
        diceResult2,
        character2.VELOCIDADE
      );
    }
    if (block === "CURVA") {
      // habilidade de curva: rolar dois dados e somar os resultados
      totalTestSkill1 = diceResult1 + character1.MANOBRABILIDADE;
      totalTestSkill2 = diceResult2 + character2.MANOBRABILIDADE;

      await logRollResult(
        character1.NOME,
        "manobrabilidade",
        diceResult1,
        character1.MANOBRABILIDADE
      );

      await logRollResult(
        character2.NOME,
        "manobrabilidade",
        diceResult2,
        character2.MANOBRABILIDADE
      );
    }
    if (block === "CONFRONTO") {
      let powerResult1 = diceResult1 + character1.PODER;
      let powerResult2 = diceResult2 + character2.PODER;

      console.log(`${character1.NOME} confrontou com ${character2.NOME}! ü•ä`);

      await logRollResult(
        character1.NOME,
        "poder",
        diceResult1,
        character1.PODER
      );

      await logRollResult(
        character2.NOME,
        "poder",
        diceResult2,
        character2.PODER
      );

      if (powerResult1 > powerResult2 && character2.PONTOS > 0) {
        console.log(
            `${character1.NOME} venceu o confronto! ${character2.NOME} perdeu 1 ponto üê¢`
        );
        character2.PONTOS--;
    }

    if (powerResult2 > powerResult1 && character1.PONTOS > 0) {
        console.log(
            `${character2.NOME} venceu o confronto! ${character1.NOME} perdeu 1 ponto üê¢`
        );
        character1.PONTOS--;
    }

        console.log(
          powerResult2 === powerResult1
              ? "Confronto empatado! Nenhum ponto foi perdido"
              : ""
      );
    }

    // verificando o vencedor
    if (totalTestSkill1 > totalTestSkill2) {
      console.log(`${character1.NOME} marcou um ponto!`);
      character1.PONTOS++;
    } else if (totalTestSkill2 > totalTestSkill1) {
      console.log(`${character2.NOME} marcou um ponto!`);
      character2.PONTOS++;
    }
    console.log("------------------------");
  }
}
// Esta fun√ß√£o est√° vazia, mas foi declarada como ass√≠ncrona
// Ela espera receber dois par√¢metros: character1 e character2
// Ambos devem ser objetos com propriedades como NOME, VELOCIDADE, etc.

// A fun√ß√£o n√£o cont√©m nenhuma l√≥gica implementada
// Provavelmente deve conter c√≥digo para simular uma corrida entre dois personagens
// Podemos esperar encontrar opera√ß√µes ass√≠ncronas dentro dela, como chamadas a APIs ou promessas

// Fun√ß√£o auto invoc√°vel
(async function main() {
  // Declara uma fun√ß√£o ass√≠ncrona chamada main
  console.log(
    `üèÅüö® Corrida entre ${player1.NOME} e ${player2.NOME} come√ßando... \n`
  ); // Imprime uma mensagem formatada na consola

  // Esta linha imprime uma string que inclui:
  // - Um emoji de bandeira üèÅ
  // - Um sinal de alerta üö®
  // - O nome dos dois jogadores separados por "e"
  // - A frase "correndo..."
  // - Uma quebra de linha \n

  // A fun√ß√£o usa template literals (backticks ``) para criar strings multilineares
  // e inserir vari√°veis diretamente na string usando ${variavel}

  await playRaceEngine(player1, player2); // Chama a fun√ß√£o playRaceEngine com os jogadores

  // Esta linha chama a fun√ß√£o playRaceEngine passando os objetos player1 e player2 como argumentos
  // A palavra-chave await indica que esta linha deve aguardar a conclus√£o da fun√ß√£o playRaceEngine antes de continuar
  // Isso √© √∫til quando a fun√ß√£o playRaceEngine contiver opera√ß√µes ass√≠ncronas ou promessas

  // Se a fun√ß√£o playRaceEngine retornar uma Promise, esta linha ir√° esperar que ela seja resolvida antes de prosseguir
  // Caso contr√°rio, se a fun√ß√£o n√£o retornar nada, esta linha simplesmente continuar√° sem aguardar
})();

// A fun√ß√£o √© imediatamente invocada ap√≥s sua defini√ß√£o
// Isso significa que a mensagem ser√° impressa assim que a fun√ß√£o for definida
