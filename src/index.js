// Definindo os jogadores
const player1 = {
  NOME: "Mario", // Nome do jogador 1
  VELOCIDADE: 4, // Velocidade do Mario
  MANOBRABILIDADE: 3, // N√≠vel de habilidade de manobras do Mario
  PODER: 3, // N√≠vel de poder do Mario
  PONTOS: 0, // Pontua√ß√£o inicial do Mario
};

const player2 = {
  NOME: "Luigi", // Nome do jogador 2
  VELOCIDADE: 5, // Velocidade do Luigi
  MANOBRABILIDADE: 2, // N√≠vel de habilidade de manobras do Luigi
  PODER: 2, // N√≠vel de poder do Luigi
  PONTOS: 0, // Pontua√ß√£o inicial do Luigi
};

// Fun√ß√£o para rolar o dado
async function rollDice() {
    return Math.floor(Math.random() * 6) + 1; // Gera um n√∫mero aleat√≥rio entre 1 e 6
};

async function playRaceEngine(character1, character2) {} // Declara uma fun√ß√£o ass√≠ncrona chamada playRaceEngine

// Esta fun√ß√£o est√° vazia, mas foi declarada como ass√≠ncrona
// Ela espera receber dois par√¢metros: character1 e character2
// Ambos devem ser objetos com propriedades como NOME, VELOCIDADE, etc.

// A fun√ß√£o n√£o cont√©m nenhuma l√≥gica implementada
// Provavelmente deve conter c√≥digo para simular uma corrida entre dois personagens
// Podemos esperar encontrar opera√ß√µes ass√≠ncronas dentro dela, como chamadas a APIs ou promessas


// Fun√ß√£o auto invoc√°vel
(async function main() { // Declara uma fun√ß√£o ass√≠ncrona chamada main
    console.log(`üèÅüö® Corrida entre ${player1.NOME} e ${player2.NOME} come√ßando... \n`); // Imprime uma mensagem formatada na consola
    
    // Esta linha imprime uma string que inclui:
    // - Um emoji de bandeira üèÅ
    // - Um sinal de alerta üö®
    // - O nome dos dois jogadores separados por "e"
    // - A frase "correndo..."
    // - Uma quebra de linha \n

    // A fun√ß√£o usa template literals (backticks ``) para criar strings multilineares
    // e inserir vari√°veis diretamente na string usando ${variavel}

    await playRaceEngine(player1, player2) // Chama a fun√ß√£o playRaceEngine com os jogadores

// Esta linha chama a fun√ß√£o playRaceEngine passando os objetos player1 e player2 como argumentos
// A palavra-chave await indica que esta linha deve aguardar a conclus√£o da fun√ß√£o playRaceEngine antes de continuar
// Isso √© √∫til quando a fun√ß√£o playRaceEngine contiver opera√ß√µes ass√≠ncronas ou promessas

// Se a fun√ß√£o playRaceEngine retornar uma Promise, esta linha ir√° esperar que ela seja resolvida antes de prosseguir
// Caso contr√°rio, se a fun√ß√£o n√£o retornar nada, esta linha simplesmente continuar√° sem aguardar
})();

// A fun√ß√£o √© imediatamente invocada ap√≥s sua defini√ß√£o
// Isso significa que a mensagem ser√° impressa assim que a fun√ß√£o for definida